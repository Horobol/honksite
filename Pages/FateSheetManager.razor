@page "/fate-sheet"
@using System.Text.Json
@using honksite.Shared;

<div class="sheetContainer">
    
    <div class="leftColumn" style="flex-direction: column; display: flex; margin-right: 10px; flex: 1">
        <div class="cardHorizontal">
          <div class="container">
            <button class="btn" style="float: left" @onclick="createAspect">[+]</button>
            <p>Click to add an aspect.</p> 
          </div>
        </div>
        <ul>
        @foreach (aspectclass anAspect in _playerSheet.aspectList) {
            <li>
                <div class="cardHorizontal" draggable="true">
                    <div class="container" style="flex-direction: column; display: flex">
                        <div class="container">
                        
                            <p><input @bind="@anAspect.aspectName" style="width: 100%; margin-top: 10px"/> </p>
                            <p><textarea @bind="@anAspect.aspectDescription" style="width: 100%; background-color: transparent; margin-bottom: 10px; box-sizing: border-box;"></textarea></p>
                        </div>
                        <button class="btn" style="float: left" @onclick="() => removeAspect(anAspect)">[🞪]</button>
                    </div>
                </div>
            </li>
        }
        </ul>
        <div class="cardHorizontal">
          <div class="container">
            <p>Visual placeholder for where the aspects end</p> 
          </div>
        </div>
    </div>
    

    <div class="rightColumn" style="flex-direction: column; display: flex; flex: 1">
        <div class="cardVertical">
          <img src="@_playerSheet.characterImage" alt="Lmao did you not set it right? Send it in discord and copy the link">
          <div class="container">
            <input @bind="_playerSheet.name" style="width: 100%"/> 
            <p><textarea @bind="_playerSheet.description" style="width: 100%; background-color: transparent; box-sizing: border-box; margin-top: 10px"></textarea></p> 
          </div>
          <input @bind="@_playerSheet.characterImage" inputmode="url"/>
        </div>

        <div class="cardHorizontal">
          <div class="container" style="display: flex; flex-direction: row; align-items: center">
            <input style="float: left; display: flex; margin-top: 10px" @bind="_saveLoadJson"/>
            <button class="btn" style="float: left; display: flex; margin: 10px" @onclick="ExportToJson">[Export]</button>
            <button class="btn" style="float: left; display: flex; margin: 10px" @onclick="ImportFromJson">[Import]</button>
            @_importError
          </div>
        </div>

        <div class="cardHorizontal">
          <div class="container" style="display: flex; flex-direction: row">
              <div style="float: left; flex: 1">
                <button class="btn" style="float: left" @onclick="createSkill">[+]</button>
                <p>Click to add a skill.</p> 
              </div>
              <div style="float: right; flex: 1">
                <p style="float: right">Click to add a stunt.</p> 
                <button class="btn" style="float: right" @onclick="createStunt">[+]</button>
              </div>
          </div>
        </div>

        <div class="stuntAndSkillContainer" style="display: flex">
            <div class="skillContainer" style="display: flex; flex-direction: column">

                @foreach (skillclass skill in _playerSheet.skillList) {
                    <div class="cardHorizontal">
                        <div class="container" style="flex-direction: row; display: flex">
                            <button class="btn" style="float: left" @onclick="() => removeSkill(skill)">[🞪]</button>
                            <p><input @bind="@skill.skillName" style="width: 100%; margin-top: 10px; margin-bottom: 10px"/></p>
                            <p><input @bind="@skill.skillLevel" style="width: 50%; margin-top: 10px; margin-bottom: 10px; margin-left: 5px" maxlength="2" inputmode="numeric"/></p>
                        </div>
                    </div>
                }
            </div>
            <div class="stuntContainer" style="display: flex; flex-direction: column">
                @foreach (stuntclass stunt in _playerSheet.stuntList) {
                    <div class="cardHorizontal">
                        <div class="container" style="flex-direction: column; display: flex">
                            <div class="stuntInterior" style="display: flex; flex-direction: row">   
                                <button class="btn" style="float: left" @onclick="() => removeStunt(stunt)">[🞪]</button>
                                <p><input @bind="@stunt.stuntName" style="width: 100%; margin-top: 10px; margin-bottom: 10px"/></p>
                            </div>
                            <p><textarea @bind="@stunt.stuntDescription" style="width: 100%; background-color: transparent; box-sizing: border-box;"></textarea></p>
                        </div>
                    </div>
                }

            </div>
        </div>
    </div>
</div>

<script type="text/javascript">

        var dragging = null;

        document.addEventListener('dragstart', function(event) {
            var target = getLI( event.target );
            dragging = target;
            event.dataTransfer.setData('text/plain', null);
            event.dataTransfer.setDragImage(self.dragging,0,0);
        });

        document.addEventListener('dragover', function(event) {
            event.preventDefault();
            var target = getLI( event.target );
            var bounding = target.getBoundingClientRect()
            var offset = bounding.y + (bounding.height/2);
            if ( event.clientY - offset > 0 ) {
       	        target.style['border-bottom'] = 'solid 4px blue';
                target.style['border-top'] = '';
            } else {
                target.style['border-top'] = 'solid 4px blue';
                target.style['border-bottom'] = '';
            }
        });

        document.addEventListener('dragleave', function(event) {
            var target = getLI( event.target );
            target.style['border-bottom'] = '';
            target.style['border-top'] = '';
        });

        document.addEventListener('drop', function(event) {
            event.preventDefault();
            var target = getLI( event.target );
            if ( target.style['border-bottom'] !== '' ) {
                target.style['border-bottom'] = '';
                target.parentNode.insertBefore(dragging, event.target.nextSibling);
            } else {
                target.style['border-top'] = '';
                target.parentNode.insertBefore(dragging, event.target);
            }
        });

        function getLI( target ) {
            while ( target.nodeName.toLowerCase() != 'li' && target.nodeName.toLowerCase() != 'body' ) {
                target = target.parentNode;
            }
            if ( target.nodeName.toLowerCase() == 'body' ) {
                return false;
            } else {
                return target;
            }
        }

</script>

@code {

    private FATEsheet _playerSheet = new();
    
    private string _saveLoadJson = "";
    private string _importError = "";

    private static readonly JsonSerializerOptions options = new(JsonSerializerDefaults.Web) { WriteIndented = true, IncludeFields = true };

    private void ExportToJson()
    {
        _saveLoadJson = JsonSerializer.Serialize(_playerSheet, typeof(FATEsheet), options);
    }

    private void ImportFromJson()
    {
        try 
        {
            _playerSheet = JsonSerializer.Deserialize<FATEsheet>(_saveLoadJson, options);
        }
        catch (JsonException e) 
        {
            _importError = e.Message;
        }
    }

    private void createAspect()
    {
        _playerSheet.aspectList.Add(new aspectclass("Aspect Name","Describe the aspect here."));
    }
    private void removeAspect(aspectclass target)
    {
        _playerSheet.aspectList.Remove(target);
    }

    private void createSkill()
    {
        _playerSheet.skillList.Add(new skillclass("Skill Name",00));
    }
    private void removeSkill(skillclass target)
    {
        _playerSheet.skillList.Remove(target);
    }

    private void createStunt()
    {
        _playerSheet.stuntList.Add(new stuntclass("Stunt Name","Describe the effects of the stunt here."));
    }
    private void removeStunt(stuntclass target)
    {
        _playerSheet.stuntList.Remove(target);
    }
}
