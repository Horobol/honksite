@page "/character-sheet"
@using System.Text.Json

<div class="characterSheet"

<!-- The topbar has the name and powerlevel -->
<body>

  <div class="containerHeading">
    <p style="text-align:left;">
        <input @bind="_playerSheet.name" />
        <span style="float:right;">
          <input @bind="_playerSheet.powerLevel" />
        </span>
    </p> 
  </div>

<div class="containerShell">

<!-- First Column includes stats, powerpoints, defenses, and offenses-->
    <div class="containerColumn">
        <h>
            Stats
        </h>
        <div class="containerStatShell">
        @foreach (string stat in _playerSheet.stats.Keys) {
            <div class="containerStats">
                <p>@stat</p>
                <hr>
                <p><input @bind='_playerSheet.stats[stat]' style="width: 30px; text-align: center" maxlength="2" inputmode="numeric"/></p>
            </div>
            }
        </div>

        <h>
            Power Points
        </h>
    </div>

<!-- Second Column includes powers, equipment, advantages, and skills -->
    <div class="containerColumn">
        <h>
            Powers
        </h>
        <p>
            <table>
                <tr>
                    <td>
                        <button @onclick="AddPower">[âœ“]</button>
                    </td>
                    <td>
                        <input @bind="_newPowerText" style="border: none; width: 100%"/>
                    </td>
                </tr>

                @foreach (string item in _playerSheet.powers) {
                    <tr>
                        <td>
                            <button @onclick="() => RemovePower(item)">[ðŸžª]</button>
                        </td>
                        <td>
                            @item
                        </td>
                    </tr>
                }
            </table>
        </p>

        <h>
            Equipment
        </h>
        <p>
            <input @bind="_playerSheet.equipment" />
        </p>

        <h>
            Advantages
        </h>
        <p>
            <input @bind="_playerSheet.advantages" />
        </p>

        <h>
            Skills
        </h>
        <p>
            <input @bind="_playerSheet.skills" />
        </p>
    </div>

<!-- Third Column includes the picture and complications text box-->
    <div class="containerColumn">
        <img src="@_playerSheet.imageUrl" alt="Image of the character @_playerSheet.name." object-fit="cover" width="500px" height="500px" margin="auto">
        <input @bind="_playerSheet.imageUrl" inputmode="url"/>
        <h> 
            Complications
        </h>
        <p>
            <input @bind="_playerSheet.complications" />
        </p>
    </div>

<!-- the containerShell div -->
</div>
</body>
<!-- the characterSheet div -->
</div>


<h2>Save/Load</h2>

<p>
    <label>
    <input @bind="_saveLoadJson" />
    <button @onclick="ExportToJson">[Export]</button>
    <button @onclick="ImportFromJson">[Import]</button>
    @_importError
    </label>
</p>

@_importError

@code {
    // General variable creation, the mmSheet stuff is in the shared folder

    private mmSheet _playerSheet = new();
    private string _saveLoadJson = "";
    private string _importError = "";

    // creates the options field for the serializing

    JsonSerializerOptions options = new JsonSerializerOptions { WriteIndented = true, IncludeFields = true };
    
    void ExportToJson()
    {
        _saveLoadJson = JsonSerializer.Serialize(_playerSheet, typeof(mmSheet), options);
    }

    void ImportFromJson()
    {
        try {
            mmSheet? _inputSheet = JsonSerializer.Deserialize<mmSheet>(_saveLoadJson, options);
            if(_inputSheet is null) { 
                return; 
            }
            _playerSheet = _inputSheet;
        }
        catch (JsonException e) {
            _importError = e.Message;
        }
    }


    // hoo boy, here's all the input box stuff. Starting with making new variables
    private string _newPowerText = "";

    // removal code

        private void RemovePower(string target)
    {
        _playerSheet.powers.Remove(target);
    }

    // addition code

        private void AddPower()
    {
        _playerSheet.powers.Add(_newPowerText);
    }
}
